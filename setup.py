'''
Author: Víctor Ruiz Gómez
Description:
Setup script to install pylib3d-mec-ginac library.
'''

# Import statements
from distutils.core import setup
from distutils.extension import Extension
from os import listdir
from os.path import join, abspath, dirname
from functools import reduce, partial
from re import sub, DOTALL
from itertools import chain
import json



######## PACKAGE DESCRIPTION ########

# Name of this library
NAME = 'pylib3d-mec-ginac'

# Version of the library
VERSION = '1.0.0'

# Author details
AUTHOR = 'Victor Ruiz Gomez'
AUTHOR_EMAIL = 'victorruizgomezdev@gmail.com'


root_dir = dirname(__file__)

# Library description
DESCRIPTION = 'Python extension for the library lib3d_mec_ginac'

with open(join(root_dir, 'README.md'), 'r') as f:
    LONG_DESCRIPTION = f.read()

# License
with open(join(root_dir, 'LICENSE.txt'), 'r') as f:
    LICENSE = f.read()

# Classifiers
CLASSIFIERS = [
    'Development Status :: 1 - Planning',
    'Framework :: Buildout :: Extension',
    'Programming Language :: Cython',
    'Programming Language :: C++'
]

# Keywords
KEYWORDS = [
    'cython', 'c++', 'bindings',
    'extension', 'wrapper'
]


######## PYTHON PACKAGE SETUP ########


# Name of the root package of this library
ROOT_PACKAGE = 'lib3d_mec_ginac'

# Directory of the root package of this library
ROOT_PACKAGE_DIR = join(root_dir, 'src')

# List of all packages (including subpackages but not the extension) to be installed within this library
PACKAGES = [ROOT_PACKAGE, f'{ROOT_PACKAGE}.core', f'{ROOT_PACKAGE}.drawing']



######## C COMPILER CONFIGURATION ########

# Directory that contains all lib3d-mec-ginac headers
LIB3D_MEC_GINAC_INCLUDE_DIR = abspath('../lib_3d_mec_ginac/include/lib_3d_mec_ginac')

# Directory where lib3d-mec-ginac libraries are located
LIB3D_MEC_GINAC_LIBRARY_DIR = abspath('../lib_3d_mec_ginac/lib')

# Directories containing header files used to build the extensions
INCLUDE_DIRS = [
    '/usr/local/include',
    '/usr/include',
    LIB3D_MEC_GINAC_INCLUDE_DIR
]

# Directories to search for libraries at link time
LIBRARY_DIRS = [
    LIB3D_MEC_GINAC_LIBRARY_DIR,
    '/usr/local/lib'
]

# Directories to search for dynamic libraries at runtime
RUNTIME_LIBRARY_DIRS = [
    LIB3D_MEC_GINAC_LIBRARY_DIR
]

# Name of the libraries for the extensions to link against
LIBRARIES = [
    'cln',
    'ginac',
    '_3d_mec_ginac-2.0'
]


######## EXTENSION SETUP ########

# Name of the Cython extension
EXTENSION_NAME = 'lib3d_mec_ginac_ext'

# Path to the directory containing additional C++ files to be compiled in the extension
CPP_DIR = join(ROOT_PACKAGE_DIR, 'core', 'cpp')

# Path to the directory containing all the .pyx file definitions of the extension
PYX_DIR = join(ROOT_PACKAGE_DIR, 'core', 'pyx')

# Path to the directory containing all the .pxd files of the extension
PXD_DIR = join(ROOT_PACKAGE_DIR, 'core', 'pxd')

# All .pyx file definitions of the extension
PYX_FILES = list(map(partial(join, PYX_DIR), chain(
    # Modules at .../pyx/
    ['imports.pyx', 'globals.pyx', 'parse.pyx', 'views.pyx', 'print.pyx', 'latex.pyx', 'numeric.pyx'],

    # Modules at .../pyx/classes/
    map(partial(join, 'classes'), [
        'object.pyx', 'system.pyx', 'symbol.pyx', 'expression.pyx',
        'base.pyx', 'matrix.pyx', 'vector3D.pyx', 'tensor3D.pyx',
        'point.pyx', 'frame.pyx', 'solid.pyx', 'wrench3D.pyx'
    ])
)))

# This variable points to the file which will be autogenerated, containing all the source code
# of all the .pyx files of the extension
PYX_MAIN = join(PYX_DIR, 'main.pyx')

# This variable will have all the path to the source files used to compile the extension
EXTENSION_SOURCES = list(chain([PYX_MAIN], map(partial(join, CPP_DIR), listdir(CPP_DIR))))


# This list holds all the extensions defined by this library
EXTENSIONS = [
    Extension(
        name=EXTENSION_NAME,
        sources=EXTENSION_SOURCES,
        include_dirs=INCLUDE_DIRS,
        library_dirs=LIBRARY_DIRS,
        runtime_library_dirs=RUNTIME_LIBRARY_DIRS,
        libraries=LIBRARIES,
        language='c++',
        extra_compile_args=['-w']
    )
]




######## OPENSCAD CONFIGURATION ########


# Name of the command line utility of openscad (this is used to convert scad
# to stl files).

OPENSCADCMD = 'openscad-nightly'







######## RUNTIME CONFIGURATION ########


# This variable holds all the settings to configure the python package at runtime
RUNTIME_CONFIG = {
    'OPENSCADCMD': OPENSCADCMD
}








######## INSTALLATION PROCEDURE ########

if __name__ == '__main__':
    ## Import statements
    try:
        from Cython.Build import cythonize
        import asciitree
        import tabulate
        import numpy
    except ImportError as e:
        # Generate error message if missing dependencies
        print(f'Failed to import "{e.name}" module')
        print('Make sure to install dependencies with "pip install -r requirements.txt"')
        exit(-1)


    ## Create config.json (this is used to configure the library at runtime)
    with open('config.json', 'w') as file:
        json.dump(RUNTIME_CONFIG, file)


    ## Merge .pyx definition files into one
    print(f"Generating {PYX_MAIN} file")
    with open(PYX_MAIN, 'w') as f_out: # All source code will be merged to this file
        # Insert a header comment in the output file
        f_out.write('\n'.join([
            "'"*3,
            f'Author: {AUTHOR}',
            'Description: This is an autogenerated source file made by the setup.py script.',
            'It contains all Cython definitions (methods & classes) of this library extension in order to interact with lib3d_mec_ginac',
            f'Version : {VERSION}',
            "'"*3
        ]))
        f_out.write('\n'*3)

        for filename in PYX_FILES:
            with open(filename, 'r') as f_in:
                code = sub("'''.*?'''", '#'*8 + f' {filename} ' + '#'*8, f_in.read(), count=1, flags=DOTALL)
                f_out.write(code)
                f_out.write('\n'*3)


    ## Generate C-Python extension
    extensions = cythonize(EXTENSIONS,
        compiler_directives={'language_level': 3}, nthreads=2, force=True)


    ## Invoke distutils setup
    setup(
        name=NAME,
        version=VERSION,

        author=AUTHOR,
        author_email=AUTHOR_EMAIL,

        description=DESCRIPTION,
        long_description=LONG_DESCRIPTION,
        license=LICENSE,

        keywords=KEYWORDS,
        classifiers=CLASSIFIERS,

        packages=PACKAGES,
        package_dir={ROOT_PACKAGE: ROOT_PACKAGE_DIR},
        package_data={ROOT_PACKAGE: ['config.json']},
        ext_modules=extensions
    )
